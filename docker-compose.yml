version: "3.8"

services:
  # Main application service (Production)
  interview-guide:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NGINX_CONFIG: nginx-prod.conf
    container_name: interview-prep-guide
    ports:
      - "8080:80"
    environment:
      - NODE_ENV=production
      - TZ=UTC
    volumes:
      # Mount content for development (optional)
      - ./markdowns/javascript:/usr/share/nginx/html/javascript:ro
      - ./markdowns/react:/usr/share/nginx/html/react:ro
      - ./markdowns/css:/usr/share/nginx/html/css:ro
      - ./markdowns/html:/usr/share/nginx/html/html:ro
      - ./markdowns/typescript:/usr/share/nginx/html/typescript:ro
      - ./markdowns/ngrx:/usr/share/nginx/html/ngrx:ro
      - ./markdowns/performance:/usr/share/nginx/html/performance:ro
      - ./markdowns/security:/usr/share/nginx/html/security:ro
      - ./markdowns/integration:/usr/share/nginx/html/integration:ro
      - ./markdowns/angular:/usr/share/nginx/html/angular:ro
      - ./markdowns/database:/usr/share/nginx/html/lead:ro
      - ./markdowns/tailwin-bootstrap:/usr/share/nginx/html/lead:ro
      - ./markdowns/vue:/usr/share/nginx/html/lead:ro
      - ./markdowns/react-native:/usr/share/nginx/html/lead:ro
      - ./markdowns/python:/usr/share/nginx/html/python:ro
      - ./markdowns/nodejs:/usr/share/nginx/html/nodejs:ro
      - ./markdowns/kubernetes:/usr/share/nginx/html/kubernetes:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - interview-guide-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.interview-guide.rule=Host(`interview-guide.localhost`)"
      - "traefik.http.services.interview-guide.loadbalancer.server.port=80"

  # Development service with live reload
  interview-guide-dev:
    image: nginx:alpine
    container_name: interview-prep-guide-dev
    ports:
      - "3000:80"
    volumes:
      - .:/usr/share/nginx/html:ro
      - ./docker/nginx-dev.conf:/etc/nginx/conf.d/default.conf:ro
    environment:
      - NODE_ENV=development
    restart: unless-stopped
    networks:
      - interview-guide-network
    profiles:
      - development

  # Optional: Reverse proxy for production
  traefik:
    image: traefik:v2.10
    container_name: interview-guide-traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
      - "8081:8080" # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - interview-guide-network
    profiles:
      - traefik

  # Optional: Analytics and monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: interview-guide-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - interview-guide-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: interview-guide-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - interview-guide-network
    profiles:
      - monitoring

networks:
  interview-guide-network:
    driver: bridge
    name: interview-guide-network

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
# Override configurations for different environments
# Usage examples:
#
# Production:
# docker-compose up -d interview-guide
#
# Development with live reload:
# docker-compose --profile development up -d interview-guide-dev
#
# With Traefik reverse proxy:
# docker-compose --profile traefik up -d
#
# With monitoring:
# docker-compose --profile monitoring up -d
#
# Full stack:
# docker-compose --profile development --profile traefik --profile monitoring up -d
